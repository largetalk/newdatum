根据TCP状态的变化过程来分析，LAST_ACK属于被动关闭连接过程中的状态
ESTABLISHED->CLOSE_WAIT->（发送ACK）->LAST_ACK->(发送FIN+接收ACK)->CLOSED
CLOSED: 这个没什么好说的了，表示初始状态。
LISTEN: 这个也是非常容易理解的一个状态，表示服务器端的某个SOCKET处于监听状态，可以接受连接了。
SYN_RCVD: 这个状态表示接受到了SYN报文，在正常情况下，这个状态是服务器端的SOCKET在建立TCP连接时的三次握手会话过程中的一个中间状态，很短暂，基本上用netstat你是很难看到这种状态的，除非你特意写了一个客户端测试程序，故意将三次TCP握手过程中最后一个ACK报文不予发送。因此这种状态时，当收到客户端的ACK报文后，它会进入到ESTABLISHED状态。
SYN_SENT: 这个状态与SYN_RCVD遥想呼应，当客户端SOCKET执行CONNECT连接时，它首先发送SYN报文，因此也随即它会进入到了SYN_SENT状态，并等待服务端的发送三次握手中的第2个报文。SYN_SENT状态表示客户端已发送SYN报文。
ESTABLISHED：这个容易理解了，表示连接已经建立了。
FIN_WAIT_1: 这个状态要好好解释一下，其实FIN_WAIT_1和FIN_WAIT_2状态的真正含义都是表示等待对方的FIN报文。而这两种状态的区别是：FIN_WAIT_1状态实际上是当SOCKET在ESTABLISHED状态时，它想主动关闭连接，向对方发送了FIN报文，此时该SOCKET即进入到FIN_WAIT_1状态。而当对方回应ACK报文后，则进入到FIN_WAIT_2状态，当然在实际的正常情况下，无论对方何种情况下，都应该马上回应ACK报文，所以FIN_WAIT_1状态一般是比较难见到的，而FIN_WAIT_2状态还有时常常可以用netstat看到。
FIN_WAIT_2：上面已经详细解释了这种状态，实际上FIN_WAIT_2状态下的SOCKET，表示半连接，也即有一方要求close连接，但另外还告诉对方，我暂时还有点数据需要传送给你，稍后再关闭连接。
TIME_WAIT: 表示收到了对方的FIN报文，并发送出了ACK报文，就等2MSL后即可回到CLOSED可用状态了。如果FIN_WAIT_1状态下，收到了对方同时带FIN标志和ACK标志的报文时，可以直接进入到TIME_WAIT状态，而无须经过FIN_WAIT_2状态。
CLOSING: 这种状态比较特殊，实际情况中应该是很少见，属于一种比较罕见的例外状态。正常情况下，当你发送FIN报文后，按理来说是应该先收到（或同时收到）对方的ACK报文，再收到对方的FIN报文。但是CLOSING状态表示你发送FIN报文后，并没有收到对方的ACK报文，反而却也收到了对方的FIN报文。什么情况下会出现此种情况呢？其实细想一下，也不难得出结论：那就是如果双方几乎在同时close一个SOCKET的话，那么就出现了双方同时发送FIN报文的情况，也即会出现CLOSING状态，表示双方都正在关闭SOCKET连接。
CLOSE_WAIT: 这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方close一个SOCKET后发送FIN报文给自己，你系统毫无疑问地会回应一个ACK报文给对方，此时则进入到CLOSE_WAIT状态。接下来呢，实际上你真正需要考虑的事情是察看你是否还有数据发送给对方，如果没有的话，那么你也就可以close这个SOCKET，发送FIN报文给对方，也即关闭连接。所以你在CLOSE_WAIT状态下，需要完成的事情是等待你去关闭连接。
LAST_ACK: 这个状态还是比较容易好理解的，它是被动关闭一方在发送FIN报文后，最后等待对方的ACK报文。当收到ACK报文后，也即可以进入到CLOSED可用状态了。

tcpdump使用方法

-w file: save dump log to file
-r file: read saved data from file, not capture from network interface
-c count: 如果没有这个参数就一直抓包直到被kill或中断，如有则抓取count个包后停止
-A      : 包内容以ascii输出
-B buff_size: 设置抓包得buffer size
-C file_size: 设置抓包文件（-w设置)得文件大小
-d      : 以可读方式dump出
-dd     : 以C片段方式dump出
-ddd    : 以数字方式dump出
-D      : 列出可被tcpdump抓包得网络设备和代号
-e      : dump中包含link-level（链接层) header, 看起来只是多了一些mac地址信息
-E spi@addr alog:secret : 对某个地址选用特定得包解密算法
-f      : 显示ip而不是别名
-F file : 过滤表达式从文件中读取， 命令行中得被忽略
-G secs : 如果可以，每secs秒rotate一下dump出来得文件(-w设置)
-H      : 试图检测802.11得draft mesh header
-i interface : 指定监听哪个网络设备， 如不指定，监听number最小的
-I      : 使设备进入"monitor"模式， 只对802.11 wifi有用
-K      : 不验证TCP， IP， UDP得校验
-l      : 输出带有行号(不过在我得arch中好像没有什么效果)
-L      : 列出设备所有可知data link type
-m      : load SMI MIB module
-M secret : 以secret给tcp加密?
-n      ：不将address转为name
-N      ：不输出domain name
-O      : Do not run the packet-matching code optimizer
-p      : Don't put the interface into promiscuous mode
-q      : quick (quite) output, 输出内容比较简单
-S      : 输出tcp seq num 得绝对值，而不是相对值
-s snaplen : truncate packet with len snaplen, 而不是65535
-T type : 强制被filter得包以type类型被解析
-t      : dump输出行中不包括时间, tt, ttt, tttt, ttttt都和时间有关
-tt     :
-ttt    :
-u      : Print undecoded NFS handles
-U      : 使输出立即被输出到文件，而不是留在缓冲区
-v      : verbose output
-vv     : more verbose output
-vvv    :
-x      : 输出包里面得内容, 在链路层， 以十六进制形式
-xx     : 包括link layer header
-X      ：同-x， 数据更有ascii格式
-XX     ：同-xx， 更有ascii格式数据
-y type : 设置data link type
-z      : 压缩dump文件
-Z      : 改变运行时用户
experssion : 过滤的表达式
experssion syntac:
    type  : host port net portrange
    dir   : src, dst, src or  dst,  src  and  dst, addr1, addr2, addr3, and addr4
    proto : ether, fddi, tr, wlan, ip,ip6, arp, rarp, decnet, tcp and udp

    there are some special `primitive' keywords  that  don't  follow  the  pattern:  gateway, broadcast, less, greater and arithmetic expressions.
    
    EX. :
        dst host xxxx
        src host xxxx
        host xxxx
        ether host yyyy
        ether src yyyy
        ether dst yyyy
        gateway zzzz
        dst net aaaa
        src net aaaa
        net aaaa
        net aaaa netmask bbbb = net aaaa/bbbb
        src port xx
        dst port xx
        port xx
        src portrange xx-yy
        dst portrange xx-yy
        portrange xx-yy
        less ll #packet length less than ll
        greater ll
        ip proto xxx  #xxx can be icmp, icmp6, igmp, igrp, pim, ah, esp, vrrp, udp, or tcp
        ip6 proto xxx
        ip6 protochain xxx
        ip protochain xxx
        ether broadcast
        ip broadcast
        ether multicast
        ip6 multicast
        ether proto xxx #xxx can be  ip,  ip6,  arp, rarp,  atalk,  aarp,  decnet, sca, lat, mopdl, moprc, iso, stp, ipx, or netbeui


tcpdump example:
    tcpdump host helios and \( hot or ace \)
    tcpdump ip host ace and not helios

    To print all traffic between local hosts and hosts at Berkeley:
    tcpdump net ucb-ether

    To print all ftp traffic through internet gateway snup: (note that the expression is quoted to  prevent  the  shell from (mis-)interpreting the parentheses):
    tcpdump 'gateway snup and (port ftp or ftp-data)'

    To  print  traffic  neither  sourced from nor destined for local hosts (if you gateway to one other net, this stuff should never make it onto your local net).
    tcpdump ip and not net localnet

    To print the start and end packets (the SYN and FIN packets) of each TCP conversation  that  involves  a  non-local host.
    tcpdump 'tcp[tcpflags] & (tcp-syn|tcp-fin) != 0 and not src and dst net localnet'

    To  print  all  IPv4 HTTP packets to and from port 80, i.e. print only packets that contain data, not, for example,SYN and FIN packets and ACK-only packets.  (IPv6 is left as an exercise for the reader.)
    tcpdump 'tcp port 80 and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)'
                                                                                                                              To print IP packets longer than 576 bytes sent through gateway snup:
    tcpdump 'gateway snup and ip[2:2] > 576'

    To print IP broadcast or multicast packets that were not sent via Ethernet broadcast or multicast:
    tcpdump 'ether[0] & 1 = 0 and ip[16] >= 224'

    To print all ICMP packets that are not echo requests/replies (i.e., not ping packets):
    tcpdump 'icmp[icmptype] != icmp-echo and icmp[icmptype] != icmp-echoreply'

